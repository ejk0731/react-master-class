npm i react-router-dom@5.3.4
npm i react-query
타입 정의 필요
npm i --save-dev @types/react-router-dom

------------------------

url 파라미터를 잡아내고 싶을때 useParams 훅사용

------------------------

index.tsx에서 ThemeProvider 컴포넌트 사용
import { ThemeProvider } from "styled-components";

------------------------

tsconfig.json에서 설정 필요, 안할경우 style-component 사용시 오류남
"include":  ["src/**/*.tsx", "src/**/*.ts", "src/**/*.d.ts"]

------------------------

Reset CSS
https://github.com/zacanger/styled-reset/blob/master/src/index.ts

------------------------

Coin API
https://api.coinpaprika.com/v1/coins

------------------------

anchor Tag makes the page to refresh, but we don't want to refresh the page.
so we use Link tag instead. 

------------------------

This will run immediately.
useEffect(() => {
  (() => console.log(1))();
}, []);

------------------------

Route States
  <Link
    to={{
      pathname: `/${coin.id}`,
      state: { name: coin.name },
    }}
  >
  const location = useLocation();

------------------------

Data types
console.log(data)
  browser console, mouse right click
  store object as global variable => temp1 has Data
So i don't have to declare all the data type

  Object.keys(temp1) on console - then you will get all key data from temp1 => as an array
  Object.keys(temp1).join() on console - then you will get the result => as string
  Object.values(temp1)
  Object.values(temp1).map(v => typeof v)
  Object.values(temp1).map(v => typeof v).join()
------------------------

interface title or name 
  put I at first, so that people can now that it's an interface
  ex) interface IPriceData {}

------------------------

useful keyboard shortcut

  - Alt + ⇧(shift) + i : can add cursor at the end of each line which you dragged

------------------------

useRouteMatch() 
  It changed to useMatch()

------------------------

React Query
  https://tanstack.com/query/latest/docs/framework/react/overview
  if you didn't install it at first => npm install react query
  
  # data, loading -> make it automatic

    ex)
    const [coins, setCoins] = useState<CoinInterface[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    useEffect(() => {
      (() => console.log(1))();
      (async () => {
        const response = await fetch("https://api.coinpaprika.com/v1/coins");
        const json = await response.json();
        setCoins(json.slice(0, 100));
        setLoading(false);
      })();
      console.log(coins);
    }, []);

  # make fetch not in your component

  # so make api.ts
    export async function fetchCoins() {
      return fetch("https://api.coinpaprika.com/v1/coins").then((response) => {
        response.json();
      });
    }
  
  # use api in your component
    const {isLoading, data} = useQuery("allCoins", fetchCoins);
    
    *****
    1. useQuery will execute fetch function 
    2. and if it's done it will tell you with isLoading 
    3. and put json() data which i got from fetch function into data
   
    @@ When you use more than two queries at the same time, key has to be unique!! (+++ key is array type)
    const { isLoading: infoLoading, data: infoData } = useQuery<IInfoData>(["info", coinId], () => fetchCoinInfo(coinId));
    const { isLoading: tickersLoading, data: tickersData } = useQuery<IPriceData>(["tickers", coinId], () => fetchCoinTickers(coinId));

  # react query is caching the response
    So if you go back and forth, it doesn't load anymore. It loads just once!

  # npm i @tanstack/react-query-devtools
    You can see what data is cached through ReactQueryDevtools.

    import {ReactQueryDevtools} from "react-query/devtools";

    function App() {
      return (
        <>
          <GlobalStyle />
          <Router />
          <ReactQueryDevtools initialIsOpen={true} />
        </>
      );
    }

------------------------

  Route path, Link to 넘겨주는게 다름, 
  Route path에 Link to 처럼 {`/${coinId}/price`} 식으로 넘기면 useParams 안넘어옴! 
  path 는 {`/:coinId/price`} 요런식으로 넘겨줘야함

------------------------
  Date.now(); => milliseconds / 1000 => seconds

  Math.floor(); 1.9 => 1
  Math.ceil(); 1.9 => 2

------------------------

APEXCHART
https://apexcharts.com/
npm install --save react-apexcharts apexcharts

------------------------

- Number()
  문자열의 수를 숫자로 바꿔준다.
  만약 인수를 형변환 할 수 없다면 NaN을 리턴한다.

- parseInt()
  문자열 인자(숫자 + 문자)를 받는다.
  그 인자를 parse(해부하다, 품사문법적 관계를 설명하다)한다.
  integer(정수) 또는 NaN을 리턴한다.

- parseFloat()
  문자열 인자(숫자 + 문자)를 받는다.
  그 인자를 parse(해부하다, 품사문법적 관계를 설명하다)한다.
  부동 소수점 숫자(float point number)를 반환한다.

*** parseInt()와 parseFloat의 공통점
  Number()와 달리, 일반 문자를 무시하고 숫자만 반환한다.

*** parseInt()와 parseFloat의 차이점
  소수점 뒤의 수를 무시하는지 안하는지의 차이

- toFixed(3)
  소수점 몇자리까지 나타낼지!
------------------------

refetchInterval: number

------------------------

react-helmet
npm install react-helmet
npm i --save-dev @types/react-helmet

head of document
  you can put
    favicon
    CSS

  <Helmet><title>코인</title></Helmet>

------------------------
TO-DO
  back button
  candle stick chart

------------------------

State Management

  Recoil, Redux,....

  Why do we need state management?
    to control one state, we have to pass it to many hierarchy
    ex) App (isDark, modifierFn)
        -> Router -> Coins (modifier)
        -> Router -> Coin -> Chart (isDark)

    global state
    share something through the whole application

    use it when you need to pass more than 2 steps

    isDark: App -> Router -> Coin -> Chart
    Header -> (isDark) <- Chart

  < Recoil >

    npm install recoil
    
    1. make states in Atoms

      import { atom } from "recoil";

      export const isDarkAtom = atom({
        key: "",
        default: false,
      });

    2. use useRecoilValue() in components

      const isDark = useRecoilValue(isDarkAtom);

    3. use useSetRecoilState() to change the state, same as setState

      const setterFn = useSetRecoilState(isDarkAtom);

    *** Mostly use both value and modifierFn 
      const [value, modifierFn] = useRecoilState(isDarkAtom);

      So...
        when you need only value => useRecoilValue
        when you need only modFn => useSetRecoilState
        when you need both value, modFn => useRecoilState

------------------------

React hook form 

  npm install react-hook-form

  make all the state and function very simple
  form validation

  useForm()

    ### register function
      This will replace state, onChange!
      This returns an object which contains name, onBlur event, onChange event, ref.

      ** validation **
        < required >
          If you put in html, user can delete from source code.
          So put it in javascript.
          If i don't put value, then it moves my cursor to the first empty field.
        
        < pattern : value, message >
          regular expression      ex) /^[A-Za-z0-9._%+-]+@naver.com$/

        < minLength, maxLength : value, message >

        < validate >
          make validate function
          ex) ++ if you put "async", it will check the data form server
              validate: {
                noNico: async(value) => value.includes("nico") ? "no nicos allowed" : true,
                noNick: (value) => value.includes("nick") ? "no nicks allowed" : true,
              },


    ### watch
      see our form is going

    ### handleSubmit
      const onValid = (data: any) => {
        console.log(data);
      };
      <form onSubmit={handleSubmit(onValid)}>

    ### formState
      formState.errors
      => returns object which has error 

      {errors?.email?.message}
      => return error message

    ### setError
      make custom validation
      
      const onValid = (data: IForm) => {
        if (data.password !== data.password1) {
          setError("password1", { message: "Password is not same" }, {shouldFocus: true});
        }
        setError("extraError", { message: "Server offline" });
        console.log(data);
      };

      <span>{errors?.password1?.message}</span>
      <span>{errors?.extraError?.message}</span>


    ** defaultValues **
      put it as default value

      const {
        register,
        watch,
        handleSubmit,
        formState: { errors },
      } = useForm<IForm>({
        defaultValues: {
          email: "@naver.com",
        }
      });

------------------------

Typescript
  never[]: always empty

------------------------

To Do List

  1. change category in object
    find to do based on id

    if you want to change "mange" to "감"
    find index of "mango"
    slice it front and back
    attach all together ...front + "감" + ...back

    const food = ["pizza", "mango", "kimchi", "kimbab"];
    const front = ["pizza"];
    const back = ["kimchi", "kimbab"];
    const finalPart = [...front, "감", ...back];

    const food = ["pizza", "mango", "kimchi", "kimbab"];
    const target = 1;
    food.slice(0, 1);
    food.slice(target + 1);
    [...food.slice(0, target), "감", ...food.slice(target+1)]
    ['pizza', '감', 'kimchi', 'kimbab']

    splice => side effect : 원래 array가 변형되고 삭제된 elements를 return 함
    slice => no side effect : 원래 array를 복제해 행해지고 결과물을 return 함

  2. selector - change output of atom

    - key, get, set
    - useRecoilValue, useRecoilState
    - filter function - return array without unmatched elements

    *get : get other state         ({ get }) => {return}
    *set : change other state      ({ set }, newValue) => {set(state), val}

      export const hourSelector = selector<number>({
        key: "hours",
        get: ({ get }) => {
          const minutes = get(minuteState);
          return Math.floor(minutes / 60);
        },
        set: ({ set }, newValue) => {
          const minutes = Number(newValue) * 60;
          set(minuteState, minutes)
          console.log(newValue);
        },
      });


  3. enum(enumerable)
    We can use it instead of type.
    When you put the string in value, there are more chances to spell it wrong

    when there is no specific value it will show it's value as number 0,1,2,3...
      export enum Categories {
        "TO_DO",   // Categories.TO_DO = 0
        "DOING",   // Categories.DOING = 1
        "DONE",    // Categories.DONE = 2
      }

    But we can give them each different value
      export enum Categories {
        "TO_DO" = "TO_DO",   // Categories.TO_DO = TO_DO
        "DOING"= "DOING",    // Categories.DOING = DOING
        "DONE"= "DONE",      // Categories.DONE = DONE
      }


  >>> CHALLENGE <<<

    1. delete button

      use filter! Filter makes new array following the condition
      So find it's id and filter object without the id! 

    2. localStorage

      [1] save data 
          
          JSON data is string only ***
          => JSON.stringify()
          
          save data with useEffect - whenever the data is changed
          
          localStorage.setItem("key1", 10);                                 // error - number
          localStorage.setItem("key2", "20");                               // success - string
          localStorage.setItem("key3", { value: 30 });                      // error - object
          localStorage.setItem("toDos", JSON.stringify({ value: 40 }));     // success - string

      [2] get data
          
          JSON data is string, so we have to make the data back to Javascript object 
          => use JSON.parse()

          const data = JSON.parse(localStorage.getItem("toDos") as string);

          export const toDoState = atom<IToDo[]>({
            key: "toDo",
            default: data,
          });
          
------------------------

#7 TRELLO CLONE

  +string => number
  +"1" => 1 as number

------------------------

*** react-beautiful-dnd : Drag and Drop

    npm i react-beautiful-dnd
    npm i --save-dev @types/react-beautiful-dnd

    npm i react-beautiful-dnd --legacy-peer-deps

    magic.placeholder => keep the board size whenever drag happens


    ex) DragDropContext, Droppable, Draggable

    <DragDropContext onDragEnd={onDragEnd}>
      <Wrapper>
        <Boards>
          <Droppable droppableId="one">
            {(magic) => (
              <Board ref={magic.innerRef} {...magic.droppableProps}>
                {toDos.map((toDo, index) => {
                  return (
                    <Draggable key={toDo} draggableId={toDo} index={index}>
                      {(magic) => (
                        <Card ref={magic.innerRef} {...magic.draggableProps} {...magic.dragHandleProps}>
                          {toDo}
                        </Card>
                      )}
                    </Draggable>
                  );
                })}
                {magic.placeholder}
              </Board>
            )}
          </Droppable>
        </Boards>
      </Wrapper>
    </DragDropContext>


*** How to make it remember it's destination??

    const onDragEnd = (result: any, provided: any) => {
      console.log(result, provided);
    };

      >>> Result <<<
      
        {
        "draggableId": "b",           // draggedItem
        "type": "DEFAULT",
        "source": {
            "index": 1,
            "droppableId": "one"
        },
        "reason": "DROP",
        "mode": "FLUID",
        "destination": {              // where did i drop the item
            "droppableId": "one",
            "index": 4
        },
        "combine": null
         }

   
    - splice
      it modifies your array directly. (mutation => Any change in the DNA sequence of a cell)

        const x = [1,2,3,4,5]
        x.splice(2, 1)            // [3]
        x                         // [1, 2, 4, 5]

    - toUpperCase
      it doesn't modifies your value directly. (non-mutation)

        const name = "nico"
        name.toUpperCase()        // 'NICO'
        name                      // 'nico'

    *** draggable's key need to be same as draggableId!!
        => don't use number for it's Id


    - react.memo
    => if the props is not changed, do not rerender    
        export default React.memo(DraggableCard);


    const toDos = {
                    x: ["a", "b"],
                    z: ["n", "t"]
                  }

    Object.keys(toDos)        // ["x", "z"]
    Object.values(toDos)      // [Array(2), Array(2)]  
    toDos["x"]                // ["a", "b"]

------------------------

Async, Sync

  Asynchronous 
  is a non-blocking architecture, 
  so the execution of one task isn’t dependent on another. 
  Tasks can run simultaneously.

  Synchronous 
  is a blocking architecture, 
  so the execution of each operation depends on completing the one before it. 
  Each task requires an answer before moving on to the next iteration.

------------------------

filter()

  const xList = [
    {text: "a", id: 12},
    {text: "b", id: 123},
  ]

  const selectedItem = xList.filter((xItem) => { return 12 === xItem.id})    // {text: "a", id: 12}

------------------------

Code CHALLENGE
1. save todo data in localStorage 
2. delete the todo. make a button or drag it into bin box and it will be deleted
3. change the boards order. make the board in droppable
4. make new board. make atom for that

------------------------

framer-motion
https://www.framer.com/motion/

npm install framer-motion
  x <div></div>
  o <motion.div></motion.div>

  transition
    type 
      spring
      damping
      stiffness
      mass
      .
      .
      .

  varients
    name it as you want

    const myVars = {
      start: { scale: 0 },
      end: { scale: 1, rotateZ: 360, transition: { type: "spring", delay: 1 } },
    };

    <Box variants={myVars} initial="start" animate="end" />

    delayChildren
    staggerChildren

  whileHover
  whileDrag
  whileFocus
  whileTap
  drag
    x, y
  dragSnapToOrigin
  dragElastic
  dragConstraints

  MotionValue
    It doesn't retrigger React redering cycle
    
    - useMotionValue
      const x = useMotionValue(0);
      x.get()
      x.set()

    - useTransform
      const rotateZ = useTransform(x, [-800, 800], [-360, 360]);

    - useScroll
      scrollX
      scrollXProgress
      scrollY
      scrollYProgress

  AnimatePresence
    Animate components when they are removed from the React tree 
    When the key changes, React think this element is disappeared

    Write props(initial, animate, exit) on the element
    - onExitComplete

    <AnimatePresence>
      {clicked ? (
        <Overlay initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} />
      ) : null}
    </AnimatePresence>

    - custom
      const box = {
        entry: (back: boolean) => ({
          x: back ? -500 : 500,
          opacity: 0,
          scale: 0,
        }),
        center: {
          x: 0,
          opacity: 1,
          scale: 1,
          transition: {
            duration: 0.5,
          },
        },
        exit: (back: boolean) => ({
          x: back ? 500 : -500,
          opacity: 0,
          scale: 0,
          transition: {
            duration: 0.5,
          },
        }),
      };
    - mode="wait"

  Layout Amimation - very cool!!!!!!!!!
    If there is a style change in element and write "layout" props on that moving element, 
    it just make animation for you!!

  Shared Layout animation
    connect components with layoutId(string)

------------------------

Netflix CLONE 

  update react-router-dom v6
    npm install react-router-dom@6

    Router => BrowserRouter
    Switch => Routes

  path="/" 인 Route를 제일 아래에 작성해주어야함

  TheMovieDB API Key
  https://www.themoviedb.org/settings/api?language=ko

  TheMovieDB API Document
  https://developers.themoviedb.org/3/movies/get-now-playing

  352a4cb68306036a2c0dc248b997c85a

  https://api.themoviedb.org/3/movie/now_playing?api_key=352a4cb68306036a2c0dc248b997c85a&language=en-US&page=1

  https://developer.themoviedb.org/docs/image-basics

  https://image.tmdb.org/t/p/w500/{file_name}
  https://image.tmdb.org/t/p/original/Asg2UUwipAdE87MxtJy7SQo08XI.jpg

  *** useNavigate

      import { useNavigate } from "react-router-dom";
      const navigate = useNavigate();
      const onBoxClicked = (movieId: number) => {
        navigate(`movies/${movieId}`);
      };

      v6에서는 array to path를 지원하지 않습니다
      Nested Route를 사용하여 주면 됩니다
      <Route path={"/"} element={<Home />}>
        <Route path={"/movies:movieId"} element={<Home />}></Route>
      </Route>

  *** useMatch
      const bigMovieMatch = useMatch("/movies/:movieId");
      <AnimatePresence>
        {bigMovieMatch ? (
          <motion.div
            layoutId={bigMovieMatch.params.movieId}
            style={{ position: "absolute", width: "50vw", height: "80vh", top: 50, left: 0, right: 0, margin: "0 auto", backgroundColor: "red" }}
          />
        ) : null}
      </AnimatePresence>

  *** URLSearchParams
      const search = new URLSearchParams("?keyword=dune&region=kr");
      search.get(region);
      search.get(keyword);
